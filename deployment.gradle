// Common logic shared across modules whose artifacts are provided to Maven Central.
//
// This script expects an extra named "deployConfig" to exist on the Project instance.
// Its type is defined within the buildSrc module of this project.
if (!project.ext.has("deployConfig")) {
  throw new IllegalStateException("Deployed module '$name' requires a 'deployConfig'")
}

final Deployed deployConfig = project.ext.deployConfig
final DeployedCredentials deployCredentials = project.ext.deployCredentials
final boolean isAndroid = project.plugins.findPlugin("com.android.library") != null

apply plugin: "maven-publish"
apply plugin: "signing"
apply plugin: "org.jetbrains.dokka"

// Create artifact tasks
task androidSourcesJar(type: Jar) {
  archiveClassifier.set("sources")
  if (isAndroid) {
    from android.sourceSets.main.java.srcDirs
  } else {
    from sourceSets.main.java.srcDirs
  }
}

task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
  archiveClassifier.set("javadoc")
  from dokkaJavadoc.outputDirectory
}

artifacts {
  archives androidSourcesJar
  archives javadocJar
}

// Setup publication details
group = deployConfig.groupId
version = deployConfig.currentVersion

final def isSnapshot = version.endsWith("SNAPSHOT")

publishing {
  publications {
    release(MavenPublication) {
      groupId deployConfig.groupId
      artifactId deployConfig.artifactId
      version deployConfig.currentVersion

      if (isAndroid) {
        artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")
      } else {
        artifact("$buildDir/libs/${project.getName()}-${version}.jar")
      }
      artifact androidSourcesJar
      artifact javadocJar

      pom {
        name = deployConfig.artifactId
        description = deployConfig.description
        url = Artifacts.githubRepo

        licenses {
          license {
            name = Artifacts.license
            url = "${Artifacts.githubUrl}/blob/main/LICENSE"
          }
        }

        developers {
          developer {
            id = "mannodermaus"
            name = "Marcel Schnelle"
          }
        }

        scm {
          connection = "scm:git:${Artifacts.githubRepo}.git"
          developerConnection = "scm:git:ssh://github.com/${Artifacts.githubRepo}.git"
          url = "${Artifacts.githubUrl}/tree/main"
        }

        // Include transitive dependencies
        withXml {
          def dependenciesNode = asNode().appendNode("dependencies")
          project.configurations.implementation.allDependencies.each {
            def dependencyNode = dependenciesNode.appendNode("dependency")
            dependencyNode.appendNode("groupId", it.group)
            dependencyNode.appendNode("artifactId", it.name)
            dependencyNode.appendNode("version", it.version)
          }
        }
      }
    }
  }

  repositories {
    maven {
      name = "central"

      def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
      def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
      url = isSnapshot ? snapshotsRepoUrl : releasesRepoUrl

      credentials {
        username deployCredentials.ossrhUsername
        password deployCredentials.ossrhPassword
      }
    }
  }
}

// Setup code signing
ext["signing.keyId"] = deployCredentials.signingKeyId
ext["signing.password"] = deployCredentials.signingPassword
ext["signing.secretKeyRingFile"] = deployCredentials.signingKeyRingFile
signing {
  sign publishing.publications
}

// Setup deployment
nexusStaging {
  packageGroup = deployConfig.groupId
  stagingProfileId = deployCredentials.sonatypeStagingProfileId
  username = deployCredentials.ossrhUsername
  password = deployCredentials.ossrhPassword
}

// Catch-all deployment task for multiple modules
def deploy = tasks.maybeCreate("deploy")
deploy.finalizedBy "publishReleasePublicationToCentralRepository"
if (!isSnapshot) {
  deploy.finalizedBy "closeAndReleaseRepository"
}
