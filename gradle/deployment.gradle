// Common logic shared across modules whose artifacts
// are provided to jCenter and Sonatype OSS.
//
// This script expects an extra named "deployConfig" to exist on the Project instance:
//
// * platform        : (String, required)
//    One of "java" or "android", depending on what type of library is being deployed
//
// * groupId      : (String, required)
//    Group of the deployed library
//
// * artifactId      : (String, required)
//    ID of the deployed library
//
// * version         : (String, required)
//    Version of the deployed library
//
// * license         : (String, required)
//    License value of the deployed library
//
// * description     : (String, required)
//    Description of the deployed library
//
// * doConfigure: (Closure<MavenPublication>, optional)
//    Function to configure the publication to deploy.
//    Receives a MavenPublication as its only argument.
//
// * doBeforePublish: (Closure, optional)
//    Function without parameters, called before deployment.
//    To stop deployment, throw an AssertionError here

/** Obtains a required parameter from a Map, or throws an Exception if it's absent */
private def required(Map config, String property) {
  def value = config.get(property, null)
  if (!value) {
    throw new IllegalStateException(
        "Deployment for module '$name' is missing required parameter '$property'")
  }
  return value
}

// Access Map properties
if (!project.ext.has("deployConfig")) {
  throw new IllegalStateException("Deployed module '$name' requires a 'deployConfig'")
}

final Object deployConfig = project.ext.deployConfig
String targetPlatform
String groupId
String artifactId
String versionNumber
String license
String description

def doConfigure = null
def doBeforePublish = null

if (deployConfig instanceof Map) {
  // Old
  targetPlatform = required(deployConfig, "platform")
  groupId = required(deployConfig, "groupId")
  artifactId = required(deployConfig, "artifactId")
  versionNumber = required(deployConfig, "version")
  license = required(deployConfig, "license")
  description = required(deployConfig, "description")

  doConfigure = deployConfig.get("doConfigure", null)
  doBeforePublish = deployConfig.get("doBeforePublish", null)

  if (!["java", "android"].contains(targetPlatform)) {
    throw new IllegalStateException(
        "Deployed module '$name' declared unknown platform '$targetPlatform'")
  }
} else {
  // New
  targetPlatform = deployConfig.platform.toString().toLowerCase(Locale.ROOT)
  groupId = deployConfig.groupId
  artifactId = deployConfig.artifactId
  versionNumber = deployConfig.currentVersion
  license = deployConfig.license
  description = deployConfig.description
}

// Apply required plugins
apply plugin: "com.jfrog.bintray"

if (targetPlatform == "java") {
  // Releases
  apply plugin: "maven"
  // Snapshots
  apply plugin: "maven-publish"
} else if (targetPlatform == "android") {
  // Releases
  apply plugin: "com.github.dcendents.android-maven"
  // Snapshots
  apply plugin: "digital.wup.android-maven-publish"
}

// ------------------------------------------------------------------------------------------------
// Artifacts Configuration
// ------------------------------------------------------------------------------------------------

// Include sources.jar archive in each release
if (targetPlatform == "java") {
  task sourcesJar(type: Jar, dependsOn: classes) {
    baseName = artifactId
    classifier = "sources"
    from sourceSets.main.allSource
  }
} else {
  task sourcesJar(type: Jar) {
    baseName = artifactId
    classifier = "sources"
    from android.sourceSets.main.java.srcDirs
  }
}

// Include javadoc.jar archive in each release
if (targetPlatform == "android") {
  task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    excludes = ["**/*.kt"]
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
  }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  baseName = artifactId
  classifier = "javadoc"
  from javadoc.destinationDir
}

// ------------------------------------------------------------------------------------------------
// Publication Configuration
// ------------------------------------------------------------------------------------------------

group = groupId
archivesBaseName = artifactId
version = versionNumber

publishing {
  publications {
    library(MavenPublication) { p ->
      if (doConfigure) {
        // Perform 100% manual publication config
        // (using fully qualified reference to ConfigureUtil to combat
        // deprecation warning related to implicit imports in Gradle 4+)
        // noinspection UnnecessaryQualifiedReference
        org.gradle.util.ConfigureUtil.configure(doConfigure, p)
      } else {
        // Apply default configuration
        p.from components.getByName(targetPlatform)
        p.artifact sourcesJar
        p.artifact javadocJar
        p.groupId groupId
        p.artifactId artifactId
        p.version version
        p.pom.withXml {
          def root = asNode()
          root.appendNode("description", description)
          root.appendNode("name", artifactId)
          root.appendNode("url", GITHUB_URL)
        }
      }
    }
  }
}

// Copy POM to location expected by Bintray
task copyPom(type: Copy) {
  from "build/publications/library"
  into "build/poms"
  include "pom-default.xml"
}

publish.dependsOn copyPom

// ------------------------------------------------------------------------------------------------
// Target Configuration
// ------------------------------------------------------------------------------------------------

project.configure(project) {
  if (project.version.endsWith("-SNAPSHOT")) {
    // Configure deployment of snapshot versions to Sonatype OSS
    project.publishing {
      repositories {
        maven {
          name "snapshot"
          credentials {
            username project.ext.sonatypeUser
            password project.ext.sonatypePass
          }
          url "https://oss.sonatype.org/content/repositories/snapshots"
        }
      }
    }

    if (doBeforePublish != null) {
      publish.doFirst doBeforePublish
    }
    project.tasks.getByName("bintrayUpload").enabled = false
  } else {
    // Configure deployment of release versions to Bintray
    project.artifacts {
      archives javadocJar
      archives sourcesJar
    }

    project.bintray {
      user = project.ext.bintrayUser
      key = project.ext.bintrayKey
      configurations = ["archives"]
      dryRun = false
      publish = true
      pkg {
        repo = "maven"
        name = artifactId
        desc = description
        licenses = [license]
        githubRepo = GITHUB_REPO
        websiteUrl = GITHUB_URL
        vcsUrl = "${GITHUB_URL}.git"
        issueTrackerUrl = "${GITHUB_URL}/issues"
        publicDownloadNumbers = true
        version {
          name = versionNumber
          desc = description
        }
      }
    }

    if (doBeforePublish != null) {
      publish.doFirst doBeforePublish
    }
  }
}
