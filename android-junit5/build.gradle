apply plugin: "groovy"
apply plugin: "kotlin"
apply plugin: "java-gradle-plugin"
apply plugin: "idea"
apply plugin: "maven"
apply plugin: "maven-publish"
apply plugin: "com.jfrog.bintray"
apply plugin: "jacoco"

// ------------------------------------------------------------------------------------------------
// Compilation Tweaks
//
// The plugin currently consists of a codebase wherein Groovy & Kotlin coexist.
// Therefore, the compilation chain has to be well-defined to allow Kotlin
// to call into Groovy code.
//
// The other way around ("call Kotlin from Groovy") is prohibited explicitly.
// ------------------------------------------------------------------------------------------------
compileGroovy.dependsOn = compileGroovy.taskDependencies.values - "compileJava"
compileKotlin.dependsOn compileGroovy
compileKotlin.classpath += files(compileGroovy.destinationDir)
classes.dependsOn compileKotlin

// ------------------------------------------------------------------------------------------------
// Plugin Resource Setup
//
// This block generates required resource files
// that provide additional configuration to the plugin.
// This includes setting up the plugin identifiers
// with which the plugin can be applied to consumer projects,
// as well as the population of marker tokens inside
// the versions.properties resource file.
// ------------------------------------------------------------------------------------------------

final def pluginClassName =
    "de.mannodermaus.gradle.plugins.junit5.AndroidJUnitPlatformPlugin"

gradlePlugin {
  plugins {
    shortIdentifier {
      id = "android-junit5"
      implementationClass = pluginClassName
    }
    longIdentifier {
      id = "de.mannodermaus.android-junit5"
      implementationClass = pluginClassName
    }
  }
}

import org.apache.tools.ant.filters.ReplaceTokens

processResources {
  def tokens = [ANDROID_JUNIT5_VERSION: VERSION_NAME,
                JUNIT4_VERSION        : JUNIT4_VERSION,
                JUNIT_PLATFORM_VERSION: JUNIT_PLATFORM_VERSION,
                JUNIT_JUPITER_VERSION : JUNIT_JUPITER_VERSION,
                JUNIT_VINTAGE_VERSION : JUNIT_VINTAGE_VERSION]

  inputs.properties(tokens)

  from(sourceSets.main.resources.srcDirs) {
    include '**/versions.properties'
    filter(ReplaceTokens, tokens: tokens)
  }
}

task test(overwrite: true) {}

// ------------------------------------------------------------------------------------------------
// Dependency Definitions
// ------------------------------------------------------------------------------------------------

dependencies {
  // Language Support
  compile gradleApi()
  compile "org.codehaus.groovy:groovy:$GROOVY_VERSION"
  compile "org.jetbrains.kotlin:kotlin-stdlib:$KOTLIN_VERSION"

  // Dependent Plugins
  compile "org.junit.platform:junit-platform-gradle-plugin:$JUNIT_PLATFORM_VERSION"
  compileOnly "com.android.tools.build:gradle:$ANDROID_PLUGIN_3X_VERSION"
}

// ------------------------------------------------------------------------------------------------
// Deployment Setup
//
// Releases are pushed to jcenter via Bintray, while snapshots are pushed to Sonatype OSS.
// This section defines the necessary tasks to push new releases and snapshots using Gradle tasks.
// ------------------------------------------------------------------------------------------------

// Include sources.jar archive in each release
task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = "sources"
  from sourceSets.main.allSource
}

// Include javadoc.jar archive in each release
task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = "javadoc"
  from javadoc.destinationDir
}

artifacts {
  archives sourcesJar
  archives javadocJar
}

version = VERSION_NAME

publishing {
  publications {
    library(MavenPublication) {
      from components.java
      artifact sourcesJar
      artifact javadocJar
      groupId GROUP_ID
      artifactId PLUGIN_ARTIFACT_ID
      version VERSION_NAME
      pom.withXml {
        def root = asNode()
        root.appendNode("description", PLUGIN_DESCRIPTION)
        root.appendNode("name", PLUGIN_ARTIFACT_ID)
        root.appendNode("url", VCS_URL)
      }
    }
  }
}

// Copy POM to location expected by Bintray
task copyPom(type: Copy) {
  from "build/publications/library"
  into "build/poms"
  include "pom-default.xml"
}

publish.dependsOn copyPom

project.configure(project) {
  if (project.version.endsWith("-SNAPSHOT")) {
    // Configure deployment of snapshot versions to Sonatype OSS
    project.publishing {
      repositories {
        maven {
          name "snapshot"
          credentials {
            username project.ext.sonatypeUser
            password project.ext.sonatypePass
          }
          url "https://oss.sonatype.org/content/repositories/snapshots"
        }
      }
    }
  } else {
    // Configure deployment of release versions to Bintray
    project.bintray {
      user = project.ext.bintrayUser
      key = project.ext.bintrayKey
      configurations = ["archives"]
      dryRun = false
      pkg {
        repo = "maven"
        name = PLUGIN_ARTIFACT_ID
        userOrg = project.ext.bintrayUser
        licenses = [PLUGIN_LICENSE_NAME]
        publish = true
        publicDownloadNumbers = true
        vcsUrl = VCS_URL
        version {
          name = VERSION_NAME
          desc = PLUGIN_DESCRIPTION
        }
      }
    }
  }
}
