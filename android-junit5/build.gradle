apply plugin: "groovy"
apply plugin: "java-gradle-plugin"
apply plugin: "idea"
apply plugin: "maven"
apply plugin: "maven-publish"
apply plugin: "com.jfrog.bintray"

// ------------------------------------------------------------------------------------------------
// Plugin Resource Setup
//
// This block generates required resource files
// that provide additional configuration to the plugin.
// This includes setting up the plugin identifiers
// with which the plugin can be applied to consumer projects,
// as well as the population of marker tokens inside
// the versions.properties resource file.
// ------------------------------------------------------------------------------------------------

final def pluginClassName = "de.mannodermaus.gradle.plugins.android_junit5.AndroidJUnitPlatformPlugin"

gradlePlugin {
  plugins {
    shortIdentifier {
      id = "android-junit5"
      implementationClass = pluginClassName
    }
    longIdentifier {
      id = "de.mannodermaus.android-junit5"
      implementationClass = pluginClassName
    }
  }
}

import org.apache.tools.ant.filters.ReplaceTokens

processResources {
  def versions = [
      ANDROID_JUNIT5_VERSION: VERSION_NAME,
      JUNIT4_VERSION: JUNIT4_VERSION,
      JUNIT_PLATFORM_VERSION: JUNIT_PLATFORM_VERSION,
      JUNIT_JUPITER_VERSION: JUNIT_JUPITER_VERSION,
      JUNIT_VINTAGE_VERSION: JUNIT_VINTAGE_VERSION
  ]

  inputs.properties(versions)
  from(sourceSets.main.resources.srcDirs) {
    include '**/versions.properties'
    filter(ReplaceTokens, tokens: versions)
  }
}

// ------------------------------------------------------------------------------------------------
// Test Setup
//
// We run our unit tests against multiple versions of the Android Gradle Plugin,
// in order to support logical & structural intricacies of both the 2.x & 3.x line of plugins.
// To achieve this, several new source sets & configurations for each branch are created here,
// which are derived from the common "test" scope.
// ------------------------------------------------------------------------------------------------

configurations {
  testAgp2xCompile {
    extendsFrom configurations.testCompile
  }
  testAgp3xCompile {
    extendsFrom configurations.testCompile
  }
}

sourceSets {
  testAgp2x {
    java.srcDir "src/testAgp2x/groovy"
    compileClasspath += sourceSets.main.output
    runtimeClasspath += sourceSets.main.output
    compileClasspath += sourceSets.test.output
    runtimeClasspath += sourceSets.test.output
  }
  testAgp3x {
    java.srcDir "src/testAgp3x/groovy"
    compileClasspath += sourceSets.main.output
    runtimeClasspath += sourceSets.main.output
    compileClasspath += sourceSets.test.output
    runtimeClasspath += sourceSets.test.output
  }
}

idea {
  module {
    testSourceDirs += file("src/testAgp2x/groovy")
    testSourceDirs += file("src/testAgp3x/groovy")
  }
}

// Run Unit Tests against Android Gradle Plugin version 2.x
task testAgp2x(type: Test) {
  testClassesDirs = sourceSets.testAgp2x.output.classesDirs
  classpath = sourceSets.main.runtimeClasspath + sourceSets.testAgp2x.runtimeClasspath
}

// Run Unit Tests against Android Gradle Plugin version 3.x
task testAgp3x(type: Test) {
  testClassesDirs = sourceSets.testAgp3x.output.classesDirs
  classpath = sourceSets.main.runtimeClasspath + sourceSets.testAgp3x.runtimeClasspath
}

// Combine all tests when executing the main JUnit task
tasks.getByName("test").dependsOn(testAgp2x,
    testAgp3x)

// ------------------------------------------------------------------------------------------------
// Dependency Definitions
// ------------------------------------------------------------------------------------------------

dependencies {
  compile gradleApi()
  compile localGroovy()
  compile "org.junit.platform:junit-platform-gradle-plugin:$JUNIT_PLATFORM_VERSION"
  compileOnly "com.android.tools.build:gradle:$ANDROID_PLUGIN_2X_VERSION"

  testCompile "junit:junit:$JUNIT4_VERSION"
  testCompile("org.spockframework:spock-core:$SPOCK_VERSION") { transitive = false }
  testCompileOnly "com.android.tools.build:gradle:$ANDROID_PLUGIN_3X_VERSION"
  testAgp2xCompile "com.android.tools.build:gradle:$ANDROID_PLUGIN_2X_VERSION"
  testAgp3xCompile "com.android.tools.build:gradle:$ANDROID_PLUGIN_3X_VERSION"
}

// ------------------------------------------------------------------------------------------------
// Deployment Setup
//
// Releases are pushed to jcenter via Bintray, while snapshots are pushed to Sonatype OSS.
// This section defines the necessary tasks to push new releases and snapshots using Gradle tasks.
// ------------------------------------------------------------------------------------------------

// Include sources.jar archive in each release
task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = "sources"
  from sourceSets.main.allSource
}

// Include javadoc.jar archive in each release
task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = "javadoc"
  from javadoc.destinationDir
}

artifacts {
  archives sourcesJar
  archives javadocJar
}

version = VERSION_NAME

publishing {
  publications {
    library(MavenPublication) {
      from components.java
      artifact sourcesJar
      artifact javadocJar
      groupId GROUP_ID
      artifactId PLUGIN_ARTIFACT_ID
      version VERSION_NAME
      pom.withXml {
        def root = asNode()
        root.appendNode("description", PLUGIN_DESCRIPTION)
        root.appendNode("name", PLUGIN_ARTIFACT_ID)
        root.appendNode("url", VCS_URL)
      }
    }
  }
}

// Copy POM to location expected by Bintray
task copyPom(type: Copy) {
  from "build/publications/library"
  into "build/poms"
  include "pom-default.xml"
}

publish.dependsOn copyPom

project.configure(project) {
  if (project.version.endsWith("-SNAPSHOT")) {
    // Configure deployment of snapshot versions to Sonatype OSS
    project.publishing {
      repositories {
        maven {
          name "snapshot"
          credentials {
            username project.ext.sonatypeUser
            password project.ext.sonatypePass
          }
          url "https://oss.sonatype.org/content/repositories/snapshots"
        }
      }
    }
  } else {
    // Configure deployment of release versions to Bintray
    project.bintray {
      user = project.ext.bintrayUser
      key = project.ext.bintrayKey
      configurations = ["archives"]
      dryRun = false
      pkg {
        repo = "maven"
        name = PLUGIN_ARTIFACT_ID
        userOrg = project.ext.bintrayUser
        licenses = [PLUGIN_LICENSE_NAME]
        publish = true
        publicDownloadNumbers = true
        vcsUrl = VCS_URL
        version {
          name = VERSION_NAME
          desc = PLUGIN_DESCRIPTION
        }
      }
    }
  }
}
