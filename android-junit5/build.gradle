apply plugin: "groovy"
apply plugin: "kotlin"
apply plugin: "java-gradle-plugin"
apply plugin: "jacoco"

// ------------------------------------------------------------------------------------------------
// Compilation Tweaks
//
// The plugin currently consists of a codebase wherein Groovy & Kotlin coexist.
// Therefore, the compilation chain has to be well-defined to allow Kotlin
// to call into Groovy code.
//
// The other way around ("call Kotlin from Groovy") is prohibited explicitly.
// ------------------------------------------------------------------------------------------------
compileGroovy.dependsOn = compileGroovy.taskDependencies.mutableValues - "compileJava"
compileKotlin.dependsOn compileGroovy
compileKotlin.classpath += files(compileGroovy.destinationDir)
classes.dependsOn compileKotlin

// ------------------------------------------------------------------------------------------------
// Plugin Resource Setup
//
// This block generates required resource files
// that provide additional configuration to the plugin.
// This includes setting up the plugin identifiers
// with which the plugin can be applied to consumer projects,
// as well as the population of marker tokens inside
// the versions.properties resource file.
// ------------------------------------------------------------------------------------------------

final def pluginClassName =
    "de.mannodermaus.gradle.plugins.junit5.AndroidJUnitPlatformPlugin"

gradlePlugin {
  automatedPublishing false
  plugins {
    shortIdentifier {
      id = "android-junit5"
      implementationClass = pluginClassName
    }
    longIdentifier {
      id = "de.mannodermaus.android-junit5"
      implementationClass = pluginClassName
    }
  }
}

import org.apache.tools.ant.filters.ReplaceTokens

processResources {
  def tokens = [ANDROID_JUNIT5_VERSION        : PLUGIN_VERSION_NAME,
                JUNIT4_VERSION                : JUNIT4_VERSION,
                INSTRUMENTATION_TEST_VERSION  : INSTRUMENTATION_VERSION_NAME_LATEST_STABLE,
                JUNIT_PLATFORM_VERSION        : JUNIT_PLATFORM_VERSION,
                JUNIT_JUPITER_VERSION         : JUNIT_JUPITER_VERSION,
                JUNIT_VINTAGE_VERSION         : JUNIT_VINTAGE_VERSION]

  inputs.properties(tokens)

  from(sourceSets.main.resources.srcDirs) {
    include '**/versions.properties'
    filter(ReplaceTokens, tokens: tokens)
  }
}

// For some strange reason, running :android-junit5:test will
// get the Gradle daemon stuck with an unknown cause.
// Overwrite the test task entirely to mitigate this
// (the actual plugin tests have their own modules anyway).
task test(overwrite: true) {}

// ------------------------------------------------------------------------------------------------
// Dependency Definitions
// ------------------------------------------------------------------------------------------------

dependencies {
  // Language Support
  implementation gradleApi()
  implementation "org.codehaus.groovy:groovy:$GROOVY_VERSION"
  implementation "org.jetbrains.kotlin:kotlin-stdlib:$KOTLIN_VERSION"

  // Other Dependencies
  implementation "com.github.zafarkhaja:java-semver:$JAVA_SEMVER_VERSION"
  implementation "com.annimon:stream:$STREAMS_BACKPORT_VERSION"

  // JUnit Platform
  implementation "org.junit.platform:junit-platform-console:$JUNIT_PLATFORM_VERSION"
  implementation "org.junit.platform:junit-platform-commons:$JUNIT_PLATFORM_VERSION"

  // Dependent Plugins
  implementation "com.android.tools.build:gradle:$ANDROID_PLUGIN_VERSION"
  compileOnly "org.jetbrains.kotlin:kotlin-gradle-plugin:$KOTLIN_VERSION"
}

// ------------------------------------------------------------------------------------------------
// Deployment Setup
//
// Releases are pushed to jcenter via Bintray, while snapshots are pushed to Sonatype OSS.
// This section defines the necessary tasks to push new releases and snapshots using Gradle tasks.
// ------------------------------------------------------------------------------------------------
project.ext.deployConfig = [platform   : "java",
                            groupId    : PLUGIN_GROUP_ID,
                            artifactId : PLUGIN_ARTIFACT_ID,
                            version    : PLUGIN_VERSION_NAME,
                            license    : LICENSE_NAME,
                            description: PLUGIN_DESCRIPTION]
apply from: "$rootDir/gradle/deployment.gradle"
