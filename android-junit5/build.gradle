apply plugin: "groovy"
apply plugin: "idea"
apply plugin: "maven"
apply plugin: "maven-publish"
apply plugin: "com.jfrog.bintray"
apply plugin: "com.jfrog.artifactory"

sourceCompatibility = JavaVersion.VERSION_1_6
targetCompatibility = JavaVersion.VERSION_1_6

// ------------------------------------------------------------------------------------------------
// Test Setup
//
// We run our unit tests against multiple versions of the Android Gradle Plugin,
// in order to support logical & structural intricacies of both the 2.x & 3.x line of plugins.
// To achieve this, several new source sets & configurations for each branch are created here,
// which are derived from the common "test" scope.
// ------------------------------------------------------------------------------------------------

configurations {
    testAgp2xCompile {
        extendsFrom configurations.testCompile
    }
    testAgp3xCompile {
        extendsFrom configurations.testCompile
    }
}

sourceSets {
    testAgp2x {
        java.srcDir "src/testAgp2x/groovy"
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
        compileClasspath += sourceSets.test.output
        runtimeClasspath += sourceSets.test.output
    }
    testAgp3x {
        java.srcDir "src/testAgp3x/groovy"
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
        compileClasspath += sourceSets.test.output
        runtimeClasspath += sourceSets.test.output
    }
}

idea {
    module {
        testSourceDirs += file("src/testAgp2x/groovy")
        testSourceDirs += file("src/testAgp3x/groovy")
    }
}

// Run Unit Tests against Android Gradle Plugin version 2.x
task testAgp2x(type: Test) {
    testClassesDirs = sourceSets.testAgp2x.output.classesDirs
    classpath = sourceSets.main.runtimeClasspath + sourceSets.testAgp2x.runtimeClasspath
}

// Run Unit Tests against Android Gradle Plugin version 3.x
task testAgp3x(type: Test) {
    testClassesDirs = sourceSets.testAgp3x.output.classesDirs
    classpath = sourceSets.main.runtimeClasspath + sourceSets.testAgp3x.runtimeClasspath
}

// Combine all tests when executing the main JUnit task
tasks.getByName("test").dependsOn(
        testAgp2x,
        testAgp3x
)

// ------------------------------------------------------------------------------------------------
// Dependency Definitions
// ------------------------------------------------------------------------------------------------

dependencies {
    compile gradleApi()
    compile localGroovy()
    compile "com.github.zafarkhaja:java-semver:$SEMVER_VERSION"
    compile "org.junit.platform:junit-platform-gradle-plugin:$JUNIT_PLATFORM_VERSION"
    compileOnly "com.android.tools.build:gradle:$ANDROID_PLUGIN_VERSION_3X"

    testCompile "junit:junit:$JUNIT4_VERSION"
    testCompile("org.spockframework:spock-core:$SPOCK_VERSION") { transitive = false }

    testCompileOnly "com.android.tools.build:gradle:$ANDROID_PLUGIN_VERSION_3X"
    testAgp2xCompile "com.android.tools.build:gradle:$ANDROID_PLUGIN_VERSION_2X"
    testAgp3xCompile "com.android.tools.build:gradle:$ANDROID_PLUGIN_VERSION_3X"
}

// ------------------------------------------------------------------------------------------------
// Deployment Setup
//
// Releases are pushed to jcenter via Bintray, and snapshots are pushed to OJO Artifactory.
// This section defines the necessary tasks to push new releases and snapshots using Gradle tasks.
// ------------------------------------------------------------------------------------------------

// Include sources.jar archive in each release
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

// Include javadoc.jar archive in each release
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = "javadoc"
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

version = VERSION_NAME

publishing {
    publications {
        library(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            groupId GROUP_ID
            artifactId ARTIFACT_ID
            version VERSION_NAME
            pom.withXml {
                def root = asNode()
                root.appendNode("description", DESCRIPTION)
                root.appendNode("name", ARTIFACT_ID)
                root.appendNode("url", VCS_URL)
            }
        }
    }
}

// Copy POM to location expected by Bintray
task copyPom(type: Copy) {
    from "build/publications/library"
    into "build/poms"
    include "pom-default.xml"
}

publish.dependsOn copyPom

// Configure deployment of release versions to Bintray
bintray {
    user = project.ext.bintrayUser
    key = project.ext.bintrayKey
    configurations = ["archives"]
    dryRun = false
    pkg {
        repo = "maven"
        name = ARTIFACT_ID
        userOrg = project.ext.bintrayUser
        licenses = ["EPL-1.0"]
        publish = true
        publicDownloadNumbers = true
        vcsUrl = VCS_URL
        version {
            name = VERSION_NAME
            desc = DESCRIPTION
        }
    }
}

// Configure deployment of snapshots to Artifactory
artifactory {
    contextUrl = "https://oss.jfrog.org/artifactory"
    publish {
        repository {
            repoKey = VERSION_NAME.endsWith("SNAPSHOT") ? "oss-snapshot-local" : "oss-release-local"
            username = project.ext.bintrayUser
            password = project.ext.bintrayKey
            maven = true
        }
        defaults {
            publishArtifacts = true
            publications("library")
        }
    }
}
